// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Message
	TailRequest
	PingRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Count uint64 `protobuf:"varint,1,opt,name=Count,json=count" json:"Count,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// TailRequest
type TailRequest struct {
}

func (m *TailRequest) Reset()                    { *m = TailRequest{} }
func (m *TailRequest) String() string            { return proto1.CompactTextString(m) }
func (*TailRequest) ProtoMessage()               {}
func (*TailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// PingRequest
type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto1.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*TailRequest)(nil), "proto.TailRequest")
	proto1.RegisterType((*PingRequest)(nil), "proto.PingRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (Test_TailClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Message, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (Test_TailClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[0], c.cc, "/proto.Test/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &testTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_TailClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type testTailClient struct {
	grpc.ClientStream
}

func (x *testTailClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/proto.Test/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	Tail(*TailRequest, Test_TailServer) error
	Ping(context.Context, *PingRequest) (*Message, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).Tail(m, &testTailServer{stream})
}

type Test_TailServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type testTailServer struct {
	grpc.ServerStream
}

func (x *testTailServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Test/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Test_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tail",
			Handler:       _Test_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto1.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xc6, 0x5c, 0xec, 0xbe, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x22, 0x5c, 0xac, 0xce, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0xac, 0xc9, 0x20, 0x8e, 0x90, 0x10, 0x17, 0x8b, 0x4b, 0x62, 0x49,
	0xa2, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x4b, 0x4a, 0x62, 0x49, 0xa2, 0x12, 0x2f, 0x17,
	0x77, 0x48, 0x62, 0x66, 0x4e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x09, 0x88, 0x1b, 0x90, 0x99,
	0x97, 0x0e, 0xe5, 0x1a, 0xa5, 0x70, 0xb1, 0x84, 0xa4, 0x16, 0x97, 0x08, 0xe9, 0x71, 0xb1, 0x80,
	0x54, 0x09, 0x09, 0x41, 0x6c, 0xd4, 0x43, 0xd2, 0x22, 0xc5, 0x07, 0x15, 0x83, 0xda, 0xad, 0xc4,
	0x60, 0xc0, 0x28, 0xa4, 0xc3, 0xc5, 0x02, 0x32, 0x06, 0xae, 0x1e, 0xc9, 0x4c, 0x4c, 0xf5, 0x49,
	0x6c, 0x60, 0x01, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xc3, 0x98, 0xa8, 0xd4, 0x00,
	0x00, 0x00,
}
